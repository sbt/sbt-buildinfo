sbt-buildinfo
=============

*I know this because build.sbt knows this.*

sbt-buildinfo generates Scala source from your build definitions.

Latest Stable
-------------

For sbt 0.13.6+ add sbt-buildinfo as a dependency in `project/plugins.sbt`:


```scala
addSbtPlugin("com.eed3si9n" % "sbt-buildinfo" % "0.4.0")
```

For sbt 0.13.(x < 6), see [0.3.2](https://github.com/sbt/sbt-buildinfo/tree/0.3.2).

For sbt 0.12, see [0.2.5](https://github.com/sbt/sbt-buildinfo/tree/0.2.5).

Usage
-----

Add the following in your `build.sbt`:

```scala
lazy val root = (project in file(".")).
  enablePlugins(BuildInfoPlugin).
  settings(
    buildInfoKeys := Seq[BuildInfoKey](name, version, scalaVersion, sbtVersion),
    buildInfoPackage := "hello"
  )
```

When you reload the settings and compile, this generates the following:

```scala
package hello

import java.io.File
import java.net.URL

/** This object was generated by sbt-buildinfo. */
case object BuildInfo {
  /** The value is "helloworld". */
  val name: String = "helloworld"
  /** The value is "0.1-SNAPSHOT". */
  val version: String = "0.1-SNAPSHOT"
  /** The value is "2.10.3". */
  val scalaVersion: String = "2.10.3"
  /** The value is "0.13.2". */
  val sbtVersion: String = "0.13.2"
  override val toString: String = "name: %s, version: %s, scalaVersion: %s, sbtVersion: %s" format (name, version, scalaVersion, sbtVersion)
}
```

to the file `target/scala-2.11/src_managed/main/sbt-buildinfo/BuildInfo.scala` (if you use scala version `2.11.x`).

Customize `buildInfoKeys` by adding whatever keys you want to have in `BuildInfo`. You can use `BuildInfoKey.map` to change the generated field name and value, add new fields with tuples, or add new fields with values computed at build-time:

```scala
buildInfoKeys ++= Seq[BuildInfoKey](
  resolvers,
  libraryDependencies in Test,
  BuildInfoKey.map(name) { case (k, v) => "project" + k.capitalize -> v.capitalize },
  "custom" -> 1234, // computed at project load time
  BuildInfoKey.action("buildTime") {
    System.currentTimeMillis
  } // re-computed each time at compile
)
```

This generates:

```scala
  /** The value is Seq("Sonatype Public: https://oss.sonatype.org/content/groups/public"). */
  val resolvers: Seq[String] = Seq("Sonatype Public: https://oss.sonatype.org/content/groups/public")
  /** The value is Seq("org.scala-lang:scala-library:2.9.1", ...). */
  val test_libraryDependencies: Seq[String] = Seq("org.scala-lang:scala-library:2.9.1", ...)
  /** The value is "Helloworld". */
  val projectName = "Helloworld"
  /** The value is 1234. */
  val custom = 1234
  /** The value is 1346906092160L. */
  val buildTime = 1346906092160L
```

Tasks can be added only if they do not depend on `sourceGenerators`. Otherwise, it will cause an infinite loop.

Here's how to change the generated object name:

```scala
buildInfoObject := "Info"
```

This changes the generated object name to `object Info`. Changing the object name is optional, but to avoid name clash with other jars, package name should be unique. Use `buildInfoPackage` key for this.

```scala
buildInfoPackage := "hello"
```

### build number

A build number can be generated as follows. Note that cross building against multiple Scala would each generate a new number.

```scala
buildInfoKeys += buildInfoBuildNumber
```

### toMap

Add the following option

```scala
buildInfoOptions += BuildInfoOption.ToMap
```

to generate `toMap` method:

```scala
val toMap = Map[String, Any](
  "name" -> name,
  "version" -> version,
  "scalaVersion" -> scalaVersion,
  "sbtVersion" -> sbtVersion)
```

### toJson

Add the following option

```scala
buildInfoOptions += BuildInfoOption.ToJson
```

to generate `toJson` method.

Eclipse support
---------------

If you use the [sbteclipse plugin](https://github.com/typesafehub/sbteclipse) to generate projects for Eclipse, you need to tell `sbteclipse` that the generated `BuildInfo.scala` is a _managed source_, i.e., a generated source file.

To do so, you can configure `sbteclipse` as follows:

```scala
EclipseKeys.createSrc := EclipseCreateSrc.Default + EclipseCreateSrc.Managed
```

This is explained in more detail in the [`sbtecliipse` documentation](https://github.com/typesafehub/sbteclipse/wiki/Using-sbteclipse).

License
-------

MIT License
