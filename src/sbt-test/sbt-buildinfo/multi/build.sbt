lazy val check = taskKey[Unit]("check")
lazy val check2 = taskKey[Unit]("check")
lazy val check3 = taskKey[Unit]("check")

lazy val commonSettings = Seq(
  version := "0.1",
  organization := "com.example",
  homepage := Some(url("http://example.com")),
  scalaVersion := "2.10.2"
)

lazy val root = (project in file(".")).
  aggregate(app, app2, app3).
  settings(commonSettings: _*)

lazy val app = (project in file("app")).
  settings(commonSettings: _*).
  settings(
    name := "sbt-buildinfo-example-app",
    buildInfoKeys := Seq(name,
                         projectID in "root",
                         version,
                         BuildInfoKey.map(homepage) { case (n, opt) => n -> opt.get },
                         scalaVersion),
    buildInfoPackage := "hello",
    check <<= (sourceManaged in Compile) map { (dir) =>
      val f = dir / "sbt-buildinfo" / ("%s.scala" format "BuildInfo")
      val lines = scala.io.Source.fromFile(f).getLines.toList
      lines match {
        case """package hello""" ::
             """""" ::
             """import java.io.File""" ::
             """import java.net.URL""" ::
             """""" ::
             """/** This object was generated by sbt-buildinfo. */""" ::
             """case object BuildInfo {""" ::
             """  /** The value is "sbt-buildinfo-example-app". */""" ::
             """  val name: String = "sbt-buildinfo-example-app"""" ::
             """  /** The value is "com.example:root:0.1". */""" ::
             """  val projectId: String = "com.example:root:0.1"""" ::
             """  /** The value is "0.1". */""" ::
             """  val version: String = "0.1"""" ::
             """  /** The value is new URL("http://example.com"). */""" ::
             """  val homepage = new URL("http://example.com")""" ::
             """  /** The value is "2.10.2". */""" ::
             """  val scalaVersion: String = "2.10.2"""" ::
             """  override val toString: String = "name: %s, projectId: %s, version: %s, homepage: %s, scalaVersion: %s" format (name, projectId, version, homepage, scalaVersion)""" ::
             """}""" :: Nil =>
        case _ => sys.error("unexpected output: " + lines.mkString("\n"))
      }
      ()
    }
  )

lazy val app2 = (project in file("app2")).
  settings(commonSettings: _*).
  settings(
    name := "sbt-buildinfo-example-app",
    buildInfoKeys := Seq(name,
                         projectID in "root",
                         version,
                         BuildInfoKey.map(homepage) { case (n, opt) => n -> opt.get },
                         scalaVersion),
    buildInfoPackage := "hello",
    check2 <<= (sourceManaged in Compile) map { (dir) =>
      val f = dir / "sbt-buildinfo" / ("%s.scala" format "BuildInfo")
      val lines = scala.io.Source.fromFile(f).getLines.toList
      lines match {
        case """package hello""" ::
             """""" ::
             """import java.io.File""" ::
             """import java.net.URL""" ::
             """""" ::
             """/** This object was generated by sbt-buildinfo. */""" ::
             """case object BuildInfo {""" ::
             """  /** The value is "sbt-buildinfo-example-app". */""" ::
             """  val name: String = "sbt-buildinfo-example-app"""" ::
             """  /** The value is "com.example:root:0.1". */""" ::
             """  val projectId: String = "com.example:root:0.1"""" ::
             """  /** The value is "0.1". */""" ::
             """  val version: String = "0.1"""" ::
             """  /** The value is new URL("http://example.com"). */""" ::
             """  val homepage = new URL("http://example.com")""" ::
             """  /** The value is "2.10.2". */""" ::
             """  val scalaVersion: String = "2.10.2"""" ::
             """  override val toString: String = "name: %s, projectId: %s, version: %s, homepage: %s, scalaVersion: %s" format (name, projectId, version, homepage, scalaVersion)""" ::
             """}""" :: Nil =>
        case _ => sys.error("unexpected output: " + lines.mkString("\n"))
      }
      ()
    }
  )


lazy val app3 = (project in file("app3")).
  settings(commonSettings: _*).
  settings(
    name := "sbt-buildinfo-example-app",
    buildInfoKeys := Seq(name,
                         projectID in "root",
                         version,
                         BuildInfoKey.map(homepage) { case (n, opt) => n -> opt.get },
                         scalaVersion),
    check3 <<= (sourceManaged in Compile) map { (dir) =>
      val f = dir / "sbt-buildinfo" / ("%s.scala" format "BuildInfo")
      val lines = scala.io.Source.fromFile(f).getLines.toList
      lines match {
        case """package buildinfo""" ::
             """""" ::
             """import java.io.File""" ::
             """import java.net.URL""" ::
             """""" ::
             """/** This object was generated by sbt-buildinfo. */""" ::
             """case object BuildInfo {""" ::
             """  /** The value is "sbt-buildinfo-example-app". */""" ::
             """  val name: String = "sbt-buildinfo-example-app"""" ::
             """  /** The value is "com.example:root:0.1". */""" ::
             """  val projectId: String = "com.example:root:0.1"""" ::
             """  /** The value is "0.1". */""" ::
             """  val version: String = "0.1"""" ::
             """  /** The value is new URL("http://example.com"). */""" ::
             """  val homepage = new URL("http://example.com")""" ::
             """  /** The value is "2.10.2". */""" ::
             """  val scalaVersion: String = "2.10.2"""" ::
             """  override val toString: String = "name: %s, projectId: %s, version: %s, homepage: %s, scalaVersion: %s" format (name, projectId, version, homepage, scalaVersion)""" ::
             """}""" :: Nil =>
        case _ => sys.error("unexpected output: " + lines.mkString("\n"))
      }
      ()
    }
  )
